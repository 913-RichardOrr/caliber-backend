AWSTemplateFormatVersion: 2010-09-09
Description: CloudFormation template for the entire AWS API Gateway Stack

Parameters:
  lambdaARNTemplate:
    Type: String
    Default: "arn:aws:lambda:us-east-1:855430746673:function:"
  associateLambdaName:
    Type: String
    Default: associate
  batchesLambdaName:
    Type: String
    Default: batches
  categoriesLambdaName:
    Type: String
    Default: categories
  batchAssociatesLambdaName:
    Type: String
    Default: batchassociates
  qcWeekLambdaName:
    Type: String
    Default: batchWeekLambda
  qcCategoriesLambdaName:
    Type: String
    Default: weekcategories-lambda
  fireBaseLambdaName:
    Type: String
    Default: firebaselambda

Resources:
  # API Gateway
  apiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: Root endpoint for the Caliber Mobile application
      Name: caliber-mobile-api-cf
  Authorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: firebaselambda
      AuthorizerResultTtlInSeconds: '0'
      AuthorizerUri: !Sub
        - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
        - lambdaArn: !Join ["",[!Ref lambdaARNTemplate, !Ref fireBaseLambdaName]]
      RestApiId: !Ref apiGateway
      Type: TOKEN
      IdentitySource: method.request.header.Authorization

# ------------------------------------------- Batches Feature ------------------------------------------- #

  # API Gateway Resource - /batches
  batchesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref apiGateway
      ParentId: !GetAtt apiGateway.RootResourceId
      PathPart: batches
  # CORS for /batches
  batchesOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: apiGateway
      ResourceId:
        Ref: batchesResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
  # GET method for /batches
  getBatchesMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref Authorizer
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !Join ["",[!Ref lambdaARNTemplate, !Ref batchesLambdaName]]
      ResourceId: !Ref batchesResource
      RestApiId: !Ref apiGateway
# ------------------------------------------- Categories Feature ------------------------------------------- #

  # API Gateway Resource - /categories
  categoriesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref apiGateway
      ParentId: !GetAtt apiGateway.RootResourceId
      PathPart: categories
  # CORS for /categories
  categoriesOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: apiGateway
      ResourceId:
        Ref: categoriesResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'POST,GET,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
  # GET method for /categories
  getCategoriesMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref Authorizer
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !Join ["",[!Ref lambdaARNTemplate, !Ref categoriesLambdaName]]
      ResourceId: !Ref categoriesResource
      RestApiId: !Ref apiGateway
  # POST method for /categories
  addCategoryMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref Authorizer
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !Join ["",[!Ref lambdaARNTemplate, !Ref categoriesLambdaName]]
      ResourceId: !Ref categoriesResource
      RestApiId: !Ref apiGateway
  # API Gateway Resource - /categories/{categoryId}
  categoryIdResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref apiGateway
      ParentId: !Ref categoriesResource
      PathPart: '{categoryId}'
  # CORS for /categories/{categoryId}
  categoryOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: apiGateway
      ResourceId:
        Ref: categoryIdResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'PUT,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
  # PUT method for /categories/{categoryId}
  updateCategoryMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref apiGateway
      ResourceId: !Ref categoryIdResource
      HttpMethod: PUT
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref Authorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !Join ["",[!Ref lambdaARNTemplate, !Ref categoriesLambdaName]]

# ------------------------------------------------------------------------------------------------------ #

  # API Gateway Resource - /qc
  qcResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref apiGateway
      ParentId: !GetAtt apiGateway.RootResourceId
      PathPart: qc
  # API Gateway Resource - /qc/batches
  qcBatchesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref apiGateway
      ParentId: !Ref qcResource
      PathPart: batches
  # API Gateway Resource - /qc/batches/{batchId}
  qcBatchResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref apiGateway
      ParentId: !Ref qcBatchesResource
      PathPart: '{batchId}'
  # CORS for /qc/batches/{batchId}
  qcBatchResourceOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: apiGateway
      ResourceId:
        Ref: qcBatchResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
  # GET method for /qc/batches/{batchId}/
  getBatchMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref Authorizer
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !Join ["",[!Ref lambdaARNTemplate, !Ref batchAssociatesLambdaName]]
      ResourceId: !Ref qcBatchResource
      RestApiId: !Ref apiGateway
# ------------------------------------------- qcWeek Feature ------------------------------------------- #

  # API Gateway Resource - /qc/batches/{batchId}/weeks
  qcWeeksResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref apiGateway
      ParentId: !Ref qcBatchResource
      PathPart: weeks
  # CORS for /qc/batches/{batchId}/weeks
  qcWeeksOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: apiGateway
      ResourceId:
        Ref: qcWeeksResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
  # GET method for /qc/batches/{batchId}/weeks
  getWeeksMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref Authorizer
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !Join ["",[!Ref lambdaARNTemplate, !Ref qcWeekLambdaName]]
      ResourceId: !Ref qcWeeksResource
      RestApiId: !Ref apiGateway
  # POST method for /qc/batches/{batchId}/weeks
  addWeekMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref Authorizer
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !Join ["",[!Ref lambdaARNTemplate, !Ref qcWeekLambdaName]]
      ResourceId: !Ref qcWeeksResource
      RestApiId: !Ref apiGateway
  # API Gateway Resource - /qc/batches/{batchId}/weeks/{week}
  qcWeekResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref apiGateway
      ParentId: !Ref qcWeeksResource
      PathPart: '{week}'
  # CORS for /qc/batches/{batchId}/weeks/{week}
  qcWeekOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: apiGateway
      ResourceId:
        Ref: qcWeekResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
  # POST method for qc/batches/{batchId}/weeks/{week}
  addWeekNoteMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref Authorizer
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !Join ["",[!Ref lambdaARNTemplate, !Ref qcWeekLambdaName]]
      ResourceId: !Ref qcWeekResource
      RestApiId: !Ref apiGateway

# ------------------------------------------- qcCategories Feature ------------------------------------------- #

  # API Gateway Resource - /qc/batches/{batchId}/weeks/{week}/categories
  qcCategoriesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref apiGateway
      ParentId: !Ref qcWeekResource
      PathPart: categories
  # CORS for /qc/batches/{batchId}/weeks/{week}/categories
  qcCategoriesOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: apiGateway
      ResourceId:
        Ref: qcCategoriesResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
  # GET method for qc/batches/{batchId}/weeks/{week}/categories
  getQcCategoriesMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref Authorizer
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !Join ["",[!Ref lambdaARNTemplate, !Ref qcCategoriesLambdaName]]
      ResourceId: !Ref qcCategoriesResource
      RestApiId: !Ref apiGateway
  # POST method for qc/batches/{batchId}/weeks/{week}/categories
  addQcCategoryMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref Authorizer
      HttpMethod: POST
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !Join ["",[!Ref lambdaARNTemplate, !Ref qcCategoriesLambdaName]]
      ResourceId: !Ref qcCategoriesResource
      RestApiId: !Ref apiGateway
  # API Gateway Resource - /qc/batches/{batchId}/weeks/{week}/categories/{categoryId}
  qcCategoryResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref apiGateway
      ParentId: !Ref qcCategoriesResource
      PathPart: '{categoryId}'
  # CORS for /qc/batches/{batchId}/weeks/{week}/categories/{categoryId}
  qcCategoryOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: apiGateway
      ResourceId:
        Ref: qcCategoryResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'DELETE,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
  # DELETE method for /qc/batches/{batchId}/weeks/{week}/categories/{categoryId}
  deleteQcCategoryMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref Authorizer
      HttpMethod: DELETE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !Join ["",[!Ref lambdaARNTemplate, !Ref qcCategoriesLambdaName]]
      ResourceId: !Ref qcCategoryResource
      RestApiId: !Ref apiGateway

# ------------------------------------------- Associates Feature ------------------------------------------- #

  # API Gateway Resource - /qc/batches/{batchId}/weeks/{week}/associates
  qcAssociatesResource:
    Type: AWS::ApiGateway::Resource
    Properties:
        RestApiId: !Ref apiGateway
        ParentId: !Ref qcWeekResource
        PathPart: associates
  # API Gateway Resource - /qc/batches/{batchId}/weeks/{week}/associates/{associateId}
  qcAssociateResource:
    Type: AWS::ApiGateway::Resource
    Properties:
        RestApiId: !Ref apiGateway
        ParentId: !Ref qcAssociatesResource
        PathPart: '{associateId}'
  # CORS for /qc/batches/{batchId}/weeks/{week}/associates/{associateId}
  qcAssociatesOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: apiGateway
      ResourceId:
        Ref: qcAssociateResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
            method.response.header.Access-Control-Allow-Methods: "'GET,PUT,PATCH,OPTIONS'"
            method.response.header.Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
      - StatusCode: 200
        ResponseModels:
          application/json: 'Empty'
        ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
  # GET method for /qc/batches/{batchId}/weeks/{week}/associates/{associateId}
  getAssociateInfoMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref Authorizer
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !Join ["",[!Ref lambdaARNTemplate, !Ref associateLambdaName]]
      ResourceId: !Ref qcAssociateResource
      RestApiId: !Ref apiGateway
  # PUT method for /qc/batches/{batchId}/weeks/{week}/associates/{associateId}
  updateAssociateInfoMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref Authorizer
      HttpMethod: PUT
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !Join ["",[!Ref lambdaARNTemplate, !Ref associateLambdaName]]
      ResourceId: !Ref qcAssociateResource
      RestApiId: !Ref apiGateway
  # PATCH method for /qc/batches/{batchId}/weeks/{week}/associates/{associateId}
  updateNoteOrStatusMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref Authorizer
      HttpMethod: PATCH
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !Join ["",[!Ref lambdaARNTemplate, !Ref associateLambdaName]]
      ResourceId: !Ref qcAssociateResource
      RestApiId: !Ref apiGateway

  # API Gateway Deployment
  apiGatewayDefaultDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - getCategoriesMethod
      - addCategoryMethod
      - updateCategoryMethod
      - getBatchesMethod
      - getBatchMethod
      - addWeekMethod
      - getWeeksMethod
      - addWeekNoteMethod
      - getQcCategoriesMethod
      - addQcCategoryMethod
      - deleteQcCategoryMethod
      - getAssociateInfoMethod
      - updateAssociateInfoMethod
      - updateNoteOrStatusMethod
    Properties:
      RestApiId: !Ref apiGateway
      StageName: default
  InvokeBatchesLambda:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Join ["",[!Ref lambdaARNTemplate, !Ref batchesLambdaName]]
      Principal: apigateway.amazonaws.com
  InvokeCategoriesLambda:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Join ["",[!Ref lambdaARNTemplate, !Ref categoriesLambdaName]]
      Principal: apigateway.amazonaws.com
  InvokeQCWeekLambda:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Join ["",[!Ref lambdaARNTemplate, !Ref qcWeekLambdaName]]
      Principal: apigateway.amazonaws.com
  InvokeQCCategoriesLambda:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Join ["",[!Ref lambdaARNTemplate, !Ref qcCategoriesLambdaName]]
      Principal: apigateway.amazonaws.com
  InvokeAssociatesLambda:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Join ["",[!Ref lambdaARNTemplate, !Ref associateLambdaName]]
      Principal: apigateway.amazonaws.com
  InvokeBatchAssociatesLambda:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Join ["",[!Ref lambdaARNTemplate, !Ref batchAssociatesLambdaName]]
      Principal: apigateway.amazonaws.com
  InvokeFirebaseLambda:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Join ["",[!Ref lambdaARNTemplate, !Ref fireBaseLambdaName]]
      Principal: apigateway.amazonaws.com
Outputs:
  apiGatewayInvokeUrl:
    Value: !Sub https://${apiGateway}.execute-api.${AWS::Region}.amazonaws.com/default